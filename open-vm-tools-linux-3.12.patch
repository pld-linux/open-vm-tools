--- open-vm-tools.sept-update.orig/modules/linux/vmblock/linux/file.c	2013-10-05 16:02:32.361985782 -0500
+++ open-vm-tools.sept-update/modules/linux/vmblock/linux/file.c	2013-10-05 16:02:32.357988581 -0500
@@ -38,6 +38,7 @@
 typedef ino_t inode_num_t;
 #endif
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
 /* Specifically for our filldir_t callback */
 typedef struct FilldirInfo {
    filldir_t filldir;
@@ -76,6 +77,7 @@
 }
 
 
+#endif
 /* File operations */
 
 /*
@@ -166,11 +126,17 @@
 
 static int
 FileOpReaddir(struct file *file,  // IN
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
               void *dirent,       // IN
               filldir_t filldir)  // IN
+#else
+              struct dir_context *ctx)  // IN
+#endif
 {
    int ret;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
    FilldirInfo info;
+#endif
    struct file *actualFile;
 
    if (!file) {
@@ -184,12 +143,19 @@
       return -EINVAL;
    }
 
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
    info.filldir = filldir;
    info.dirent = dirent;
 
    actualFile->f_pos = file->f_pos;
    ret = vfs_readdir(actualFile, Filldir, &info);
    file->f_pos = actualFile->f_pos;
+#else
+   /* Ricky Wong Yung Fei:
+    * Manipulation of pos is now handled internally by iterate_dir().
+    */
+   ret = iterate_dir(actualFile, ctx);
+#endif
 
    return ret;
 }
@@ -237,7 +194,11 @@
 
 
 struct file_operations RootFileOps = {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
    .readdir = FileOpReaddir,
+#else
+   .iterate = FileOpReaddir,
+#endif
    .open    = FileOpOpen,
    .release = FileOpRelease,
 };
--- open-vm-tools-9.4.0-1280544/modules/linux/vmblock/linux/inode.c~	2014-02-08 12:40:26.486505188 +0100
+++ open-vm-tools-9.4.0-1280544/modules/linux/vmblock/linux/inode.c	2014-02-08 17:15:30.956987114 +0100
@@ -230,7 +230,12 @@
       goto out;
    }
 
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 12, 0)
+   nd_set_link(nd, iinfo->name);
+   ret = 0;
+#else
    ret = vfs_follow_link(nd, iinfo->name);
+#endif
 
 out:
 #if LINUX_VERSION_CODE >= KERNEL_VERSION(2, 6, 13)
--- open-vm-tools-9.4.0-1280544/modules/linux/vmhgfs/link.c~	2013-09-23 17:51:10.000000000 +0200
+++ open-vm-tools-9.4.0-1280544/modules/linux/vmhgfs/link.c	2014-02-08 17:17:37.996986192 +0100
@@ -111,8 +111,14 @@
          error = -EINVAL;
       } else {
          LOG(6, (KERN_DEBUG "VMware hgfs: HgfsFollowlink: calling "
+#if LINUX_VERSION_CODE >= KERNEL_VERSION(3, 12, 0)
+                 "nd_set_link\n"));
+         nd_set_link(nd, fileName);
+	 error = 0;
+#else
                  "vfs_follow_link\n"));
          error = vfs_follow_link(nd, fileName);
+#endif
       }
       kfree(fileName);
    }
--- a/modules/linux/vsock/linux/af_vsock.c
+++ b/modules/linux/vsock/linux/af_vsock.c
@@ -3147,7 +3147,11 @@ __VSockVmciCreate(struct net *net,
       vsk->connectTimeout = psk->connectTimeout;
    } else {
       vsk->trusted = capable(CAP_NET_ADMIN);
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
       vsk->owner = current_uid();
+#else
+      vsk->owner = from_kuid(&init_user_ns, current_uid());
+#endif
       vsk->queuePairSize = VSOCK_DEFAULT_QP_SIZE;
       vsk->queuePairMinSize = VSOCK_DEFAULT_QP_SIZE_MIN;
       vsk->queuePairMaxSize = VSOCK_DEFAULT_QP_SIZE_MAX;
--- a/modules/linux/vmhgfs/file.c
+++ b/modules/linux/vmhgfs/file.c
@@ -656,7 +656,12 @@ HgfsOpen(struct inode *inode,  // IN: In
             iparent = dparent->d_inode;
 
             HgfsSetUidGid(iparent, file->f_dentry,
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
                           current_fsuid(), current_fsgid());
+#else
+                          from_kuid(&init_user_ns, current_fsuid()),
+                          from_kgid(&init_user_ns,current_fsgid()));
+#endif
 
             dput(dparent);
          }
--- a/modules/linux/vmhgfs/filesystem.c
+++ b/modules/linux/vmhgfs/filesystem.c
@@ -231,13 +231,21 @@ HgfsInitSuperInfo(HgfsMountInfo *mountIn
    if (si->uidSet) {
       si->uid = mountInfo->uid;
    } else {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
       si->uid = current_uid();
+#else
+      si->uid = from_kuid(&init_user_ns, current_uid());
+#endif
    }
    si->gidSet = mountInfo->gidSet;
    if (si->gidSet) {
       si->gid = mountInfo->gid;
    } else {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
       si->gid = current_gid();
+#else
+      si->gid = from_kgid(&init_user_ns, current_gid());
+#endif
    }
    si->fmask = mountInfo->fmask;
    si->dmask = mountInfo->dmask;
--- a/modules/linux/vmhgfs/inode.c
+++ b/modules/linux/vmhgfs/inode.c
@@ -490,13 +490,21 @@ HgfsPackSetattrRequest(struct iattr *iat
 
       if (valid & ATTR_UID) {
          attrV2->mask |= HGFS_ATTR_VALID_USERID;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
          attrV2->userId = iattr->ia_uid;
+#else
+         attrV2->userId = from_kuid(&init_user_ns, iattr->ia_uid);
+#endif
          *changed = TRUE;
       }
 
       if (valid & ATTR_GID) {
          attrV2->mask |= HGFS_ATTR_VALID_GROUPID;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
          attrV2->groupId = iattr->ia_gid;
+#else
+         attrV2->groupId = from_kgid(&init_user_ns, iattr->ia_gid);
+#endif
          *changed = TRUE;
       }
 
@@ -593,13 +593,21 @@ HgfsPackSetattrRequest(struct iattr *iat
 
       if (valid & ATTR_UID) {
          attrV2->mask |= HGFS_ATTR_VALID_USERID;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
          attrV2->userId = iattr->ia_uid;
+#else
+         attrV2->userId = from_kuid(&init_user_ns, iattr->ia_uid);
+#endif
          *changed = TRUE;
       }
 
       if (valid & ATTR_GID) {
          attrV2->mask |= HGFS_ATTR_VALID_GROUPID;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
          attrV2->groupId = iattr->ia_gid;
+#else
+         attrV2->groupId = from_kgid(&init_user_ns, iattr->ia_gid);
+#endif
          *changed = TRUE;
       }
 
@@ -1192,7 +1192,12 @@ HgfsMkdir(struct inode *dir,     // IN:
              * a Linux machine and as root, but we might as well give it
              * a go.
              */
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
             HgfsSetUidGid(dir, dentry, current_fsuid(), current_fsgid());
+#else
+            HgfsSetUidGid(dir, dentry, from_kuid(&init_user_ns, current_fsuid()),
+                                       from_kgid(&init_user_ns, current_fsgid()));
+#endif
          }
 
          /*
--- a/modules/linux/vmhgfs/fsutil.c
+++ b/modules/linux/vmhgfs/fsutil.c
@@ -639,14 +639,30 @@ HgfsChangeFileAttributes(struct inode *i
     * the server didn't give us a uid or gid.
     */
    if (si->uidSet || (attr->mask & HGFS_ATTR_VALID_USERID) == 0) {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
       inode->i_uid = si->uid;
+#else
+      inode->i_uid = make_kuid(&init_user_ns, si->uid);
+#endif
    } else {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
       inode->i_uid = attr->userId;
+#else
+      inode->i_uid = make_kuid(&init_user_ns, attr->userId);
+#endif
    }
    if (si->gidSet || (attr->mask & HGFS_ATTR_VALID_GROUPID) == 0) {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
       inode->i_gid = si->gid;
+#else
+      inode->i_gid = make_kgid(&init_user_ns, si->gid);
+#endif
    } else {
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
       inode->i_gid = attr->groupId;
+#else
+      inode->i_gid = make_kgid(&init_user_ns, attr->groupId);
+#endif
    }
 
    inode->i_rdev = 0;  /* Device nodes are not supported */
@@ -1623,7 +1623,11 @@ HgfsSetUidGid(struct inode *parent,
    struct iattr setUidGid;
 
    setUidGid.ia_valid = ATTR_UID;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
    setUidGid.ia_uid = uid;
+#else
+   setUidGid.ia_uid = make_kuid(&init_user_ns, uid);
+#endif
 
    /*
     * Only set the gid if the host file system wouldn't have for us.  See the
@@ -1631,7 +1631,11 @@ HgfsSetUidGid(struct inode *parent,
     */
    if (!parent || !(parent->i_mode & S_ISGID)) {
       setUidGid.ia_valid |= ATTR_GID;
+#if LINUX_VERSION_CODE < KERNEL_VERSION(3, 12, 0)
       setUidGid.ia_gid = gid;
+#else
+      setUidGid.ia_gid = make_kgid(&init_user_ns, gid);
+#endif
    }
 
    /*
